// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/wrappers/main.go from wrappers.go.tmpl.

package amcl

import "github.com/miracl/amcl/wrap"

// RSADecrypt_3072 is a wrapper if wrap.RSA_3072_DECRYPT
func RSADecrypt_3072(priv wrap.RSAPrivateKey, G []byte) (F []byte) {

	GOct := wrap.NewOctet(G)
	defer GOct.Free()

	FSize := wrap.RFS_3072
	FOct := wrap.MakeOctet(FSize)
	defer FOct.Free()

	wrap.RSA_3072_DECRYPT(priv, GOct, FOct)

	F = FOct.ToBytes()
	return
}

// RSAEncrypt_3072 is a wrapper if wrap.RSA_3072_ENCRYPT
func RSAEncrypt_3072(pub wrap.RSAPublicKey, F []byte) (G []byte) {

	FOct := wrap.NewOctet(F)
	defer FOct.Free()

	GSize := wrap.RFS_3072
	GOct := wrap.MakeOctet(GSize)
	defer GOct.Free()

	wrap.RSA_3072_ENCRYPT(pub, FOct, GOct)

	G = GOct.ToBytes()
	return
}

// RSAKeyPair_3072 is a wrapper if wrap.RSA_3072_KEY_PAIR
func RSAKeyPair_3072(rng *wrap.Rand, e int32, p []byte, q []byte) (priv wrap.RSAPrivateKey, pub wrap.RSAPublicKey) {

	priv = wrap.NewRSAPrivateKey_3072()

	pub = wrap.NewRSAPublicKey_3072()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	qOct := wrap.NewOctet(q)
	defer qOct.Free()

	wrap.RSA_3072_KEY_PAIR(rng, e, priv, pub, pOct, qOct)

	return
}

// RSAPrivateKeyKill_3072 is a wrapper if wrap.RSA_3072_PRIVATE_KEY_KILL
func RSAPrivateKeyKill_3072(PRIV wrap.RSAPrivateKey) {

	wrap.RSA_3072_PRIVATE_KEY_KILL(PRIV)

	return
}
