// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/wrappers/main.go from wrappers.go.tmpl.

package amcl

import "github.com/miracl/amcl/wrap"

// MPIN_BN254CX_CLIENT_1 is a wrapper if wrap.MPIN_BN254CX_CLIENT_1
func MPIN_BN254CX_CLIENT_1(h int, d int, ID []byte, R *wrap.Rand, x []byte, pin int, T []byte, S []byte, U []byte, UT []byte, TP []byte) (err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	TPOct := wrap.NewOctet(TP)
	defer TPOct.Free()

	err = wrap.MPIN_BN254CX_CLIENT_1(h, d, IDOct, R, xOct, pin, TOct, SOct, UOct, UTOct, TPOct)

	return
}

// MPIN_BN254CX_CLIENT_2 is a wrapper if wrap.MPIN_BN254CX_CLIENT_2
func MPIN_BN254CX_CLIENT_2(x []byte, y []byte, V []byte) (err error) {

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	err = wrap.MPIN_BN254CX_CLIENT_2(xOct, yOct, VOct)

	return
}

// MPIN_BN254CX_CLIENT_KEY is a wrapper if wrap.MPIN_BN254CX_CLIENT_KEY
func MPIN_BN254CX_CLIENT_KEY(h int, g1 []byte, g2 []byte, pin int, r []byte, x []byte, p []byte, T []byte, K []byte) (err error) {

	g1Oct := wrap.NewOctet(g1)
	defer g1Oct.Free()

	g2Oct := wrap.NewOctet(g2)
	defer g2Oct.Free()

	rOct := wrap.NewOctet(r)
	defer rOct.Free()

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	KOct := wrap.NewOctet(K)
	defer KOct.Free()

	err = wrap.MPIN_BN254CX_CLIENT_KEY(h, g1Oct, g2Oct, pin, rOct, xOct, pOct, TOct, KOct)

	return
}

// MPIN_BN254CX_CLIENT is a wrapper if wrap.MPIN_BN254CX_CLIENT
func MPIN_BN254CX_CLIENT(h int, d int, ID []byte, R *wrap.Rand, x []byte, pin int, T []byte, V []byte, U []byte, UT []byte, TP []byte, MESSAGE []byte, t int, y []byte) (err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	TPOct := wrap.NewOctet(TP)
	defer TPOct.Free()

	MESSAGEOct := wrap.NewOctet(MESSAGE)
	defer MESSAGEOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	err = wrap.MPIN_BN254CX_CLIENT(h, d, IDOct, R, xOct, pin, TOct, VOct, UOct, UTOct, TPOct, MESSAGEOct, t, yOct)

	return
}

// MPIN_BN254CX_EXTRACT_PIN is a wrapper if wrap.MPIN_BN254CX_EXTRACT_PIN
func MPIN_BN254CX_EXTRACT_PIN(h int, ID []byte, pin int, CS []byte) (err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CSOct := wrap.NewOctet(CS)
	defer CSOct.Free()

	err = wrap.MPIN_BN254CX_EXTRACT_PIN(h, IDOct, pin, CSOct)

	return
}

// MPIN_BN254CX_GET_CLIENT_PERMIT is a wrapper if wrap.MPIN_BN254CX_GET_CLIENT_PERMIT
func MPIN_BN254CX_GET_CLIENT_PERMIT(h int, d int, S []byte, ID []byte, TP []byte) (err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	TPOct := wrap.NewOctet(TP)
	defer TPOct.Free()

	err = wrap.MPIN_BN254CX_GET_CLIENT_PERMIT(h, d, SOct, IDOct, TPOct)

	return
}

// MPIN_BN254CX_GET_CLIENT_SECRET is a wrapper if wrap.MPIN_BN254CX_GET_CLIENT_SECRET
func MPIN_BN254CX_GET_CLIENT_SECRET(S []byte, ID []byte, CS []byte) (err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CSOct := wrap.NewOctet(CS)
	defer CSOct.Free()

	err = wrap.MPIN_BN254CX_GET_CLIENT_SECRET(SOct, IDOct, CSOct)

	return
}

// MPIN_BN254CX_GET_DVS_KEYPAIR is a wrapper if wrap.MPIN_BN254CX_GET_DVS_KEYPAIR
func MPIN_BN254CX_GET_DVS_KEYPAIR(R *wrap.Rand, Z []byte, Pa []byte) (err error) {

	ZOct := wrap.NewOctet(Z)
	defer ZOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254CX_GET_DVS_KEYPAIR(R, ZOct, PaOct)

	return
}

// MPIN_BN254CX_GET_G1_MULTIPLE is a wrapper if wrap.MPIN_BN254CX_GET_G1_MULTIPLE
func MPIN_BN254CX_GET_G1_MULTIPLE(R *wrap.Rand, t int, x []byte, G []byte, W []byte) (err error) {

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	GOct := wrap.NewOctet(G)
	defer GOct.Free()

	WOct := wrap.NewOctet(W)
	defer WOct.Free()

	err = wrap.MPIN_BN254CX_GET_G1_MULTIPLE(R, t, xOct, GOct, WOct)

	return
}

// MPIN_BN254CX_GET_SERVER_SECRET is a wrapper if wrap.MPIN_BN254CX_GET_SERVER_SECRET
func MPIN_BN254CX_GET_SERVER_SECRET(S []byte, SS []byte) (err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	err = wrap.MPIN_BN254CX_GET_SERVER_SECRET(SOct, SSOct)

	return
}

// MPIN_BN254CX_KANGAROO is a wrapper if wrap.MPIN_BN254CX_KANGAROO
func MPIN_BN254CX_KANGAROO(E []byte, F []byte) (err error) {

	EOct := wrap.NewOctet(E)
	defer EOct.Free()

	FOct := wrap.NewOctet(F)
	defer FOct.Free()

	err = wrap.MPIN_BN254CX_KANGAROO(EOct, FOct)

	return
}

// MPIN_BN254CX_PRECOMPUTE is a wrapper if wrap.MPIN_BN254CX_PRECOMPUTE
func MPIN_BN254CX_PRECOMPUTE(T []byte, ID []byte, CP []byte, g1 []byte, g2 []byte) (err error) {

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CPOct := wrap.NewOctet(CP)
	defer CPOct.Free()

	g1Oct := wrap.NewOctet(g1)
	defer g1Oct.Free()

	g2Oct := wrap.NewOctet(g2)
	defer g2Oct.Free()

	err = wrap.MPIN_BN254CX_PRECOMPUTE(TOct, IDOct, CPOct, g1Oct, g2Oct)

	return
}

// MPIN_BN254CX_RANDOM_GENERATE is a wrapper if wrap.MPIN_BN254CX_RANDOM_GENERATE
func MPIN_BN254CX_RANDOM_GENERATE(R *wrap.Rand, S []byte) (err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	err = wrap.MPIN_BN254CX_RANDOM_GENERATE(R, SOct)

	return
}

// MPIN_BN254CX_RECOMBINE_G1 is a wrapper if wrap.MPIN_BN254CX_RECOMBINE_G1
func MPIN_BN254CX_RECOMBINE_G1(Q1 []byte, Q2 []byte, Q []byte) (err error) {

	Q1Oct := wrap.NewOctet(Q1)
	defer Q1Oct.Free()

	Q2Oct := wrap.NewOctet(Q2)
	defer Q2Oct.Free()

	QOct := wrap.NewOctet(Q)
	defer QOct.Free()

	err = wrap.MPIN_BN254CX_RECOMBINE_G1(Q1Oct, Q2Oct, QOct)

	return
}

// MPIN_BN254CX_RECOMBINE_G2 is a wrapper if wrap.MPIN_BN254CX_RECOMBINE_G2
func MPIN_BN254CX_RECOMBINE_G2(P1 []byte, P2 []byte, P []byte) (err error) {

	P1Oct := wrap.NewOctet(P1)
	defer P1Oct.Free()

	P2Oct := wrap.NewOctet(P2)
	defer P2Oct.Free()

	POct := wrap.NewOctet(P)
	defer POct.Free()

	err = wrap.MPIN_BN254CX_RECOMBINE_G2(P1Oct, P2Oct, POct)

	return
}

// MPIN_BN254CX_SERVER_2 is a wrapper if wrap.MPIN_BN254CX_SERVER_2
func MPIN_BN254CX_SERVER_2(d int, HID []byte, HTID []byte, y []byte, SS []byte, U []byte, UT []byte, V []byte, E []byte, F []byte, Pa []byte) (err error) {

	HIDOct := wrap.NewOctet(HID)
	defer HIDOct.Free()

	HTIDOct := wrap.NewOctet(HTID)
	defer HTIDOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	EOct := wrap.NewOctet(E)
	defer EOct.Free()

	FOct := wrap.NewOctet(F)
	defer FOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254CX_SERVER_2(d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, PaOct)

	return
}

// MPIN_BN254CX_SERVER_KEY is a wrapper if wrap.MPIN_BN254CX_SERVER_KEY
func MPIN_BN254CX_SERVER_KEY(h int, Z []byte, SS []byte, w []byte, p []byte, I []byte, U []byte, UT []byte, K []byte) (err error) {

	ZOct := wrap.NewOctet(Z)
	defer ZOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	wOct := wrap.NewOctet(w)
	defer wOct.Free()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	IOct := wrap.NewOctet(I)
	defer IOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	KOct := wrap.NewOctet(K)
	defer KOct.Free()

	err = wrap.MPIN_BN254CX_SERVER_KEY(h, ZOct, SSOct, wOct, pOct, IOct, UOct, UTOct, KOct)

	return
}

// MPIN_BN254CX_SERVER is a wrapper if wrap.MPIN_BN254CX_SERVER
func MPIN_BN254CX_SERVER(h int, d int, HID []byte, HTID []byte, y []byte, SS []byte, U []byte, UT []byte, V []byte, E []byte, F []byte, ID []byte, MESSAGE []byte, t int, Pa []byte) (err error) {

	HIDOct := wrap.NewOctet(HID)
	defer HIDOct.Free()

	HTIDOct := wrap.NewOctet(HTID)
	defer HTIDOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	EOct := wrap.NewOctet(E)
	defer EOct.Free()

	FOct := wrap.NewOctet(F)
	defer FOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	MESSAGEOct := wrap.NewOctet(MESSAGE)
	defer MESSAGEOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254CX_SERVER(h, d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, IDOct, MESSAGEOct, t, PaOct)

	return
}

// MPIN_BN254CX_SERVER_1 is a wrapper if wrap.MPIN_BN254CX_SERVER_1
func MPIN_BN254CX_SERVER_1(h int, d int, ID []byte, HID []byte, HTID []byte) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	HIDOct := wrap.NewOctet(HID)
	defer HIDOct.Free()

	HTIDOct := wrap.NewOctet(HTID)
	defer HTIDOct.Free()

	wrap.MPIN_BN254CX_SERVER_1(h, d, IDOct, HIDOct, HTIDOct)

	return
}
