// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/rsa/main.go from wrap/rsa.go.tmpl.

package wrap

// #cgo LDFLAGS: -lamcl_rsa_{{.keySize}}
// #include <stdio.h>
// #include <stdlib.h>
// #include "amcl.h"
// #include "randapi.h"
// #include "rsa_{{.keySize}}.h"
// #include "utils.h"
// #include "wrappers_generated.h"
import "C"

// RSA Constant
const RFS_{{.keySize}} int = int(C.RFS_{{.keySize}})     // RFS_{{.keySize}} is the RSA Public Key Size in bytes
const FFLEN_{{.keySize}} int = int(C.FFLEN_{{.keySize}}) // FFLEN_{{.keySize}} consists in 2^n multiplier of BIGBITS to specify supported Finite Field size, e.g 2048=256*2^3 where BIGBITS=256

const HASH_TYPE_RSA_{{.keySize}} int = int(C.HASH_TYPE_RSA_{{.keySize}}) // HASH_TYPE_RSA_{{.keySize}} is the chosen Hash algorithm

// RSAKeyPair generates an RSA key pair
func RSAKeyPair_{{.keySize}}(rng *Rand, e int32, p []byte, q []byte) (RSAPrivateKey, RSAPublicKey) {
	var prvKey C.rsa_private_key_{{.keySize}}
	var pubKey C.rsa_public_key_{{.keySize}}

	C._RSA_{{.keySize}}_KEY_PAIR(rng.csprng(), C.int32_t(e), &prvKey, &pubKey, *newOctet(p), *newOctet(q))
	return &prvKey, &pubKey

}

// RSAEncrypt_{{.keySize}} encrypts F with the public key
func RSAEncrypt_{{.keySize}}(pubKey RSAPublicKey, f []byte) []byte {
	g := make([]byte, RFS_{{.keySize}})
	C._RSA_{{.keySize}}_ENCRYPT(pubKey.(*C.rsa_public_key_{{.keySize}}), *newOctet(f), *makeOctet(g))
	return g
}

// RSADecrypt_{{.keySize}} decrypts G with the private key
func RSADecrypt_{{.keySize}}(prvKey RSAPrivateKey, g []byte) []byte {
	f := make([]byte, RFS_{{.keySize}})
	C._RSA_{{.keySize}}_DECRYPT(prvKey.(*C.rsa_private_key_{{.keySize}}), *newOctet(g), *makeOctet(f))
	return f
}

// RSAPrivateKeyKill_{{.keySize}} destroys an RSA private Key
func RSAPrivateKeyKill_{{.keySize}}(prvKey RSAPrivateKey) {
	C._RSA_{{.keySize}}_PRIVATE_KEY_KILL(prvKey.(*C.rsa_private_key_{{.keySize}}))
}
