// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/wrappers/main.go from wrappers.go.tmpl.

package amcl

import "github.com/miracl/amcl/wrap"

// Server2_BN254CX_Kangaroo is a wrapper of wrap.MPIN_BN254CX_SERVER_2
func Server2_BN254CX_Kangaroo(d int, HID []byte, HTID []byte, y []byte, SS []byte, U []byte, UT []byte, V []byte, Pa []byte) (E []byte, F []byte, err error) {

	HIDOct := wrap.NewOctet(HID)
	defer HIDOct.Free()

	HTIDOct := wrap.NewOctet(HTID)
	defer HTIDOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	ESize := wrap.GTS_BN254CX
	EOct := wrap.MakeOctet(ESize)
	defer EOct.Free()

	FSize := wrap.GTS_BN254CX
	FOct := wrap.MakeOctet(FSize)
	defer FOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254CX_SERVER_2(d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, PaOct)

	E = EOct.ToBytes()

	F = FOct.ToBytes()

	return
}

// Server_BN254CX_Kangaroo is a wrapper of wrap.MPIN_BN254CX_SERVER
func Server_BN254CX_Kangaroo(h int, d int, SS []byte, U []byte, UT []byte, V []byte, ID []byte, MESSAGE []byte, t int, Pa []byte) (HID []byte, HTID []byte, y []byte, E []byte, F []byte, err error) {

	HIDSize := wrap.G1S_BN254CX
	HIDOct := wrap.MakeOctet(HIDSize)
	defer HIDOct.Free()

	HTIDSize := wrap.G1S_BN254CX
	HTIDOct := wrap.MakeOctet(HTIDSize)
	defer HTIDOct.Free()

	ySize := wrap.PGS_BN254CX
	yOct := wrap.MakeOctet(ySize)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	ESize := wrap.GTS_BN254CX
	EOct := wrap.MakeOctet(ESize)
	defer EOct.Free()

	FSize := wrap.GTS_BN254CX
	FOct := wrap.MakeOctet(FSize)
	defer FOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	MESSAGEOct := wrap.NewOctet(MESSAGE)
	defer MESSAGEOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254CX_SERVER(h, d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, IDOct, MESSAGEOct, t, PaOct)

	HID = HIDOct.ToBytes()

	HTID = HTIDOct.ToBytes()

	y = yOct.ToBytes()

	E = EOct.ToBytes()

	F = FOct.ToBytes()

	return
}
