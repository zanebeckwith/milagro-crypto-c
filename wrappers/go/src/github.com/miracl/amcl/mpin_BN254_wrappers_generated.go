// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/wrappers/main.go from wrappers.go.tmpl.

package amcl

import "github.com/miracl/amcl/wrap"

// Client1_BN254 is a wrapper of wrap.MPIN_BN254_CLIENT_1
func Client1_BN254(h int, d int, ID []byte, R *wrap.Rand, x []byte, pin int, T []byte, TP []byte) (xResult []byte, S []byte, U []byte, UT []byte, err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	var xOct *wrap.Octet
	if x != nil {
		xOct = wrap.NewOctet(x)
		defer xOct.Free()
	} else {
		xSize := wrap.PGS_BN254
		xOct = wrap.MakeOctet(xSize)
		defer xOct.Free()
	}

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	SSize := wrap.G1S_BN254
	SOct := wrap.MakeOctet(SSize)
	defer SOct.Free()

	USize := wrap.G1S_BN254
	UOct := wrap.MakeOctet(USize)
	defer UOct.Free()

	UTSize := wrap.G1S_BN254
	UTOct := wrap.MakeOctet(UTSize)
	defer UTOct.Free()

	TPOct := wrap.NewOctet(TP)
	defer TPOct.Free()

	err = wrap.MPIN_BN254_CLIENT_1(h, d, IDOct, R, xOct, pin, TOct, SOct, UOct, UTOct, TPOct)

	xResult = xOct.ToBytes()

	S = SOct.ToBytes()

	U = UOct.ToBytes()

	UT = UTOct.ToBytes()

	return
}

// Client2_BN254 is a wrapper of wrap.MPIN_BN254_CLIENT_2
func Client2_BN254(x []byte, y []byte, V []byte) (VResult []byte, err error) {

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	err = wrap.MPIN_BN254_CLIENT_2(xOct, yOct, VOct)

	VResult = VOct.ToBytes()
	return
}

// ClientKey_BN254 is a wrapper of wrap.MPIN_BN254_CLIENT_KEY
func ClientKey_BN254(h int, g1 []byte, g2 []byte, pin int, r []byte, x []byte, p []byte, T []byte) (K []byte, err error) {

	g1Oct := wrap.NewOctet(g1)
	defer g1Oct.Free()

	g2Oct := wrap.NewOctet(g2)
	defer g2Oct.Free()

	rOct := wrap.NewOctet(r)
	defer rOct.Free()

	xOct := wrap.NewOctet(x)
	defer xOct.Free()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	KSize := wrap.PAS_BN254
	KOct := wrap.MakeOctet(KSize)
	defer KOct.Free()

	err = wrap.MPIN_BN254_CLIENT_KEY(h, g1Oct, g2Oct, pin, rOct, xOct, pOct, TOct, KOct)

	K = KOct.ToBytes()
	return
}

// Client_BN254 is a wrapper of wrap.MPIN_BN254_CLIENT
func Client_BN254(h int, d int, ID []byte, R *wrap.Rand, x []byte, pin int, T []byte, TP []byte, MESSAGE []byte, t int) (xResult []byte, V []byte, U []byte, UT []byte, y []byte, err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	var xOct *wrap.Octet
	if x != nil {
		xOct = wrap.NewOctet(x)
		defer xOct.Free()
	} else {
		xSize := wrap.PGS_BN254
		xOct = wrap.MakeOctet(xSize)
		defer xOct.Free()
	}

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	VSize := wrap.G1S_BN254
	VOct := wrap.MakeOctet(VSize)
	defer VOct.Free()

	USize := wrap.G1S_BN254
	UOct := wrap.MakeOctet(USize)
	defer UOct.Free()

	UTSize := wrap.G1S_BN254
	UTOct := wrap.MakeOctet(UTSize)
	defer UTOct.Free()

	TPOct := wrap.NewOctet(TP)
	defer TPOct.Free()

	MESSAGEOct := wrap.NewOctet(MESSAGE)
	defer MESSAGEOct.Free()

	ySize := wrap.PGS_BN254
	yOct := wrap.MakeOctet(ySize)
	defer yOct.Free()

	err = wrap.MPIN_BN254_CLIENT(h, d, IDOct, R, xOct, pin, TOct, VOct, UOct, UTOct, TPOct, MESSAGEOct, t, yOct)

	xResult = xOct.ToBytes()

	V = VOct.ToBytes()

	U = UOct.ToBytes()

	UT = UTOct.ToBytes()

	y = yOct.ToBytes()
	return
}

// ExtractPIN_BN254 is a wrapper of wrap.MPIN_BN254_EXTRACT_PIN
func ExtractPIN_BN254(h int, ID []byte, pin int, CS []byte) (CSResult []byte, err error) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CSOct := wrap.NewOctet(CS)
	defer CSOct.Free()

	err = wrap.MPIN_BN254_EXTRACT_PIN(h, IDOct, pin, CSOct)

	CSResult = CSOct.ToBytes()
	return
}

// GetClientPermit_BN254 is a wrapper of wrap.MPIN_BN254_GET_CLIENT_PERMIT
func GetClientPermit_BN254(h int, d int, S []byte, ID []byte) (TP []byte, err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	TPSize := wrap.G1S_BN254
	TPOct := wrap.MakeOctet(TPSize)
	defer TPOct.Free()

	err = wrap.MPIN_BN254_GET_CLIENT_PERMIT(h, d, SOct, IDOct, TPOct)

	TP = TPOct.ToBytes()
	return
}

// GetClientSecret_BN254 is a wrapper of wrap.MPIN_BN254_GET_CLIENT_SECRET
func GetClientSecret_BN254(S []byte, ID []byte) (CS []byte, err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CSSize := wrap.G1S_BN254
	CSOct := wrap.MakeOctet(CSSize)
	defer CSOct.Free()

	err = wrap.MPIN_BN254_GET_CLIENT_SECRET(SOct, IDOct, CSOct)

	CS = CSOct.ToBytes()
	return
}

// GetDVSKeyPair_BN254 is a wrapper of wrap.MPIN_BN254_GET_DVS_KEYPAIR
func GetDVSKeyPair_BN254(R *wrap.Rand, Z []byte) (ZResult []byte, Pa []byte, err error) {

	var ZOct *wrap.Octet
	if Z != nil {
		ZOct = wrap.NewOctet(Z)
		defer ZOct.Free()
	} else {
		ZSize := wrap.PGS_BN254
		ZOct = wrap.MakeOctet(ZSize)
		defer ZOct.Free()
	}

	PaSize := wrap.G2S_BN254
	PaOct := wrap.MakeOctet(PaSize)
	defer PaOct.Free()

	err = wrap.MPIN_BN254_GET_DVS_KEYPAIR(R, ZOct, PaOct)

	ZResult = ZOct.ToBytes()

	Pa = PaOct.ToBytes()
	return
}

// GetG1Multiple_BN254 is a wrapper of wrap.MPIN_BN254_GET_G1_MULTIPLE
func GetG1Multiple_BN254(R *wrap.Rand, t int, x []byte, G []byte) (xResult []byte, W []byte, err error) {

	var xOct *wrap.Octet
	if x != nil {
		xOct = wrap.NewOctet(x)
		defer xOct.Free()
	} else {
		xSize := wrap.PGS_BN254
		xOct = wrap.MakeOctet(xSize)
		defer xOct.Free()
	}

	GOct := wrap.NewOctet(G)
	defer GOct.Free()

	WSize := wrap.G1S_BN254
	WOct := wrap.MakeOctet(WSize)
	defer WOct.Free()

	err = wrap.MPIN_BN254_GET_G1_MULTIPLE(R, t, xOct, GOct, WOct)

	xResult = xOct.ToBytes()

	W = WOct.ToBytes()
	return
}

// GetServerSecret_BN254 is a wrapper of wrap.MPIN_BN254_GET_SERVER_SECRET
func GetServerSecret_BN254(S []byte) (SS []byte, err error) {

	SOct := wrap.NewOctet(S)
	defer SOct.Free()

	SSSize := wrap.G2S_BN254
	SSOct := wrap.MakeOctet(SSSize)
	defer SSOct.Free()

	err = wrap.MPIN_BN254_GET_SERVER_SECRET(SOct, SSOct)

	SS = SSOct.ToBytes()
	return
}

// Kangaroo_BN254 is a wrapper of wrap.MPIN_BN254_KANGAROO
func Kangaroo_BN254(E []byte, F []byte) (err error) {

	EOct := wrap.NewOctet(E)
	defer EOct.Free()

	FOct := wrap.NewOctet(F)
	defer FOct.Free()

	err = wrap.MPIN_BN254_KANGAROO(EOct, FOct)

	return
}

// Precompute_BN254 is a wrapper of wrap.MPIN_BN254_PRECOMPUTE
func Precompute_BN254(T []byte, ID []byte, CP []byte) (g1 []byte, g2 []byte, err error) {

	TOct := wrap.NewOctet(T)
	defer TOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	CPOct := wrap.NewOctet(CP)
	defer CPOct.Free()

	g1Size := wrap.GTS_BN254
	g1Oct := wrap.MakeOctet(g1Size)
	defer g1Oct.Free()

	g2Size := wrap.GTS_BN254
	g2Oct := wrap.MakeOctet(g2Size)
	defer g2Oct.Free()

	err = wrap.MPIN_BN254_PRECOMPUTE(TOct, IDOct, CPOct, g1Oct, g2Oct)

	g1 = g1Oct.ToBytes()

	g2 = g2Oct.ToBytes()
	return
}

// RandomGenerate_BN254 is a wrapper of wrap.MPIN_BN254_RANDOM_GENERATE
func RandomGenerate_BN254(R *wrap.Rand) (S []byte, err error) {

	SSize := wrap.PGS_BN254
	SOct := wrap.MakeOctet(SSize)
	defer SOct.Free()

	err = wrap.MPIN_BN254_RANDOM_GENERATE(R, SOct)

	S = SOct.ToBytes()
	return
}

// RecombineG1_BN254 is a wrapper of wrap.MPIN_BN254_RECOMBINE_G1
func RecombineG1_BN254(Q1 []byte, Q2 []byte) (Q []byte, err error) {

	Q1Oct := wrap.NewOctet(Q1)
	defer Q1Oct.Free()

	Q2Oct := wrap.NewOctet(Q2)
	defer Q2Oct.Free()

	QSize := wrap.G1S_BN254
	QOct := wrap.MakeOctet(QSize)
	defer QOct.Free()

	err = wrap.MPIN_BN254_RECOMBINE_G1(Q1Oct, Q2Oct, QOct)

	Q = QOct.ToBytes()
	return
}

// RecombineG2_BN254 is a wrapper of wrap.MPIN_BN254_RECOMBINE_G2
func RecombineG2_BN254(P1 []byte, P2 []byte) (P []byte, err error) {

	P1Oct := wrap.NewOctet(P1)
	defer P1Oct.Free()

	P2Oct := wrap.NewOctet(P2)
	defer P2Oct.Free()

	PSize := wrap.G2S_BN254
	POct := wrap.MakeOctet(PSize)
	defer POct.Free()

	err = wrap.MPIN_BN254_RECOMBINE_G2(P1Oct, P2Oct, POct)

	P = POct.ToBytes()
	return
}

// Server2_BN254 is a wrapper of wrap.MPIN_BN254_SERVER_2
func Server2_BN254(d int, HID []byte, HTID []byte, y []byte, SS []byte, U []byte, UT []byte, V []byte, Pa []byte) (E []byte, F []byte, err error) {

	HIDOct := wrap.NewOctet(HID)
	defer HIDOct.Free()

	HTIDOct := wrap.NewOctet(HTID)
	defer HTIDOct.Free()

	yOct := wrap.NewOctet(y)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	ESize := wrap.GTS_BN254
	EOct := wrap.MakeOctet(ESize)
	defer EOct.Free()

	FSize := wrap.GTS_BN254
	FOct := wrap.MakeOctet(FSize)
	defer FOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254_SERVER_2(d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, PaOct)

	E = EOct.ToBytes()

	F = FOct.ToBytes()

	return
}

// ServerKey_BN254 is a wrapper of wrap.MPIN_BN254_SERVER_KEY
func ServerKey_BN254(h int, Z []byte, SS []byte, w []byte, p []byte, I []byte, U []byte, UT []byte) (K []byte, err error) {

	ZOct := wrap.NewOctet(Z)
	defer ZOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	wOct := wrap.NewOctet(w)
	defer wOct.Free()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	IOct := wrap.NewOctet(I)
	defer IOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	KSize := wrap.PAS_BN254
	KOct := wrap.MakeOctet(KSize)
	defer KOct.Free()

	err = wrap.MPIN_BN254_SERVER_KEY(h, ZOct, SSOct, wOct, pOct, IOct, UOct, UTOct, KOct)

	K = KOct.ToBytes()
	return
}

// Server_BN254 is a wrapper of wrap.MPIN_BN254_SERVER
func Server_BN254(h int, d int, SS []byte, U []byte, UT []byte, V []byte, ID []byte, MESSAGE []byte, t int, Pa []byte) (HID []byte, HTID []byte, y []byte, E []byte, F []byte, err error) {

	HIDSize := wrap.G1S_BN254
	HIDOct := wrap.MakeOctet(HIDSize)
	defer HIDOct.Free()

	HTIDSize := wrap.G1S_BN254
	HTIDOct := wrap.MakeOctet(HTIDSize)
	defer HTIDOct.Free()

	ySize := wrap.PGS_BN254
	yOct := wrap.MakeOctet(ySize)
	defer yOct.Free()

	SSOct := wrap.NewOctet(SS)
	defer SSOct.Free()

	UOct := wrap.NewOctet(U)
	defer UOct.Free()

	UTOct := wrap.NewOctet(UT)
	defer UTOct.Free()

	VOct := wrap.NewOctet(V)
	defer VOct.Free()

	ESize := wrap.GTS_BN254
	EOct := wrap.MakeOctet(ESize)
	defer EOct.Free()

	FSize := wrap.GTS_BN254
	FOct := wrap.MakeOctet(FSize)
	defer FOct.Free()

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	MESSAGEOct := wrap.NewOctet(MESSAGE)
	defer MESSAGEOct.Free()

	PaOct := wrap.NewOctet(Pa)
	defer PaOct.Free()

	err = wrap.MPIN_BN254_SERVER(h, d, HIDOct, HTIDOct, yOct, SSOct, UOct, UTOct, VOct, EOct, FOct, IDOct, MESSAGEOct, t, PaOct)

	HID = HIDOct.ToBytes()

	HTID = HTIDOct.ToBytes()

	y = yOct.ToBytes()

	E = EOct.ToBytes()

	F = FOct.ToBytes()

	return
}

// Server1_BN254 is a wrapper of wrap.MPIN_BN254_SERVER_1
func Server1_BN254(h int, d int, ID []byte) (HID []byte, HTID []byte) {

	IDOct := wrap.NewOctet(ID)
	defer IDOct.Free()

	HIDSize := wrap.G1S_BN254
	HIDOct := wrap.MakeOctet(HIDSize)
	defer HIDOct.Free()

	HTIDSize := wrap.G1S_BN254
	HTIDOct := wrap.MakeOctet(HTIDSize)
	defer HTIDOct.Free()

	wrap.MPIN_BN254_SERVER_1(h, d, IDOct, HIDOct, HTIDOct)

	HID = HIDOct.ToBytes()

	HTID = HTIDOct.ToBytes()
	return
}
