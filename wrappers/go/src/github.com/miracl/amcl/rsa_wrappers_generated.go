// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Generated by gen/wrappers/main.go from wrappers.go.tmpl.

package amcl

import "github.com/miracl/amcl/wrap"

// PKCS15 is a wrapper if wrap.PKCS15
func PKCS15(h int, m []byte, wSize int) (w []byte, err error) {

	mOct := wrap.NewOctet(m)
	defer mOct.Free()

	wOct := wrap.MakeOctet(wSize)
	defer wOct.Free()

	err = wrap.PKCS15(h, mOct, wOct)

	w = wOct.ToBytes()
	return
}

// OAEPencode is a wrapper if wrap.OAEP_ENCODE
func OAEPencode(h int, m []byte, rng *wrap.Rand, p []byte, fSize int) (f []byte, err error) {

	mOct := wrap.NewOctet(m)
	defer mOct.Free()

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	fOct := wrap.MakeOctet(fSize)
	defer fOct.Free()

	err = wrap.OAEP_ENCODE(h, mOct, rng, pOct, fOct)

	f = fOct.ToBytes()
	return
}

// OAEPdecode is a wrapper if wrap.OAEP_DECODE
func OAEPdecode(h int, p []byte, f []byte) (fResult []byte, err error) {

	pOct := wrap.NewOctet(p)
	defer pOct.Free()

	fOct := wrap.NewOctet(f)
	defer fOct.Free()

	err = wrap.OAEP_DECODE(h, pOct, fOct)

	fResult = fOct.ToBytes()
	return
}
